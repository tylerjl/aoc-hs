-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell solutions to adventofcode
--   
--   Please see README.md
@package adventofcode
@version 0.1.0.0


-- | Solutions to the day 01 set of problems for <a>adventofcode.com</a>.
module Y2015.D01

-- | Find final level from list of elevator movements
level :: String -> Int

-- | Find position that arrives at level 0
basement :: String -> Maybe Int


-- | Solutions to the day 03 set of problems for <a>adventofcode.com</a>.
module Y2015.D03

-- | Find number of deliverables for santa's route
santaRun :: String -> Int

-- | Find number of deliverables for the robot's route
roboRun :: String -> Int


-- | Solutions to the day 04 set of problems for <a>adventofcode.com</a>.
module Y2015.D04

-- | Cracks password hash to retrieve original value
crack :: ByteString -> Int -> Int


-- | Solutions to the day 08 set of problems for <a>adventofcode.com</a>.
module Y2015.D08

-- | Finds the length difference between escaped and unescaped string
difference :: String -> Int

-- | Same as <a>encoded</a>, but different
encoded :: String -> Int


-- | Solutions to the day 10 set of problems for <a>adventofcode.com</a>.
module Y2015.D10

-- | Play the "looksay" game
lookSay :: String -> Int -> String


-- | Solutions to the day 12 set of problems for <a>adventofcode.com</a>.
module Y2015.D12

-- | Sum all numbers in a JSON-like structure
jsonSum :: ByteString -> Int

-- | Sums all numbers in a JSON-like structure with a specific filter
jsonSumFixed :: ByteString -> Int


-- | Solutions to the day 13 set of problems for <a>adventofcode.com</a>.
module Y2015.D13

-- | Find optimal seating happiness!
solveSeating :: String -> Int


-- | Solutions to the day 14 set of problems for <a>adventofcode.com</a>.
module Y2015.D14

-- | Finds the winning deer in a distance race
distanceRace :: String -> Int -> Int

-- | Finds the winning deer in a race by most time spent in the lead
leadingRace :: String -> Int -> Int
instance GHC.Classes.Eq Y2015.D14.Reindeer
instance GHC.Show.Show Y2015.D14.Reindeer
instance GHC.Classes.Eq Y2015.D14.Racer
instance GHC.Show.Show Y2015.D14.Racer
instance GHC.Show.Show Y2015.D14.Race
instance GHC.Classes.Ord Y2015.D14.Racer


-- | Solutions to the day 15 set of problems for <a>adventofcode.com</a>.
module Y2015.D15

-- | Finds a calorie score for a cookie recipe
calorieScore :: String -> Int

-- | Calculates a cookie score
cookieScore :: String -> Int
instance GHC.Classes.Eq Y2015.D15.Ingredient
instance GHC.Show.Show Y2015.D15.Ingredient


-- | Solutions to the day 16 set of problems for <a>adventofcode.com</a>.
module Y2015.D16

-- | Given a list of Aunts, find the Id of the gifting Aunt.
findAunt :: String -> Int

-- | Finds the real Aunt given altered targeting criteria
findRealAunt :: String -> Int


-- | Solutions to the day 17 set of problems for <a>adventofcode.com</a>.
module Y2015.D17

-- | Finds how many combinations of containers can fit a volume of nog
filledAmong :: Int -> String -> Int

-- | Finds how many combinations of containers the ideal combination can
--   |fit a volume of nog
minFilledAmong :: Int -> String -> Int


-- | Solutions to the day 18 set of problems for <a>adventofcode.com</a>.
module Y2015.D18

-- | Animates an example light grid
animateLights :: String -> Int -> Int

-- | Animates an example light grid with stuck lights
animateStuckLights :: String -> Int -> Int


-- | Solutions to the day 19 set of problems for <a>adventofcode.com</a>.
module Y2015.D19

-- | Finds the number of possible distinct molecules
distinctMols :: String -> Int

-- | Returns the number of steps required to form a specified molecule
molSteps :: String -> Int


-- | Solutions to the day 20 set of problems for <a>adventofcode.com</a>.
--   
--   Original credit for most of this due to aepsilon:
--   <a>https://www.reddit.com/r/adventofcode/comments/3xjpp2/day_20_solutions/cy5brqe</a>
module Y2015.D20

-- | Finds lowest house number that receives as many as the given presents
withMinPresents :: Int -> Int

-- | Finds lowest house number that receives as many as the given presents
--   |given the special delivery case.
withMinPresents2 :: Int -> Int


-- | Solutions to the day 21 set of problems for <a>adventofcode.com</a>.
module Y2015.D21

-- | Simulates the outcome of two <a>Combatant</a>s dueling.
battle :: Combatant -> Combatant -> (Bool, Int)

-- | Finds the cheapest possible victory given combatant stats.
cheapestVictory :: String -> Int

-- | Finds the worst possible loss given combatant stats.
highestLoss :: String -> Int

-- | Parses a string into a <a>Combatant</a>
toBoss :: String -> Combatant

-- | Utility function to generate a cheap test <a>Combatant</a>.
mkTestCombatant :: Combatant
instance GHC.Show.Show Y2015.D21.Item
instance GHC.Show.Show Y2015.D21.Combatant


-- | Solutions to the day 22 set of problems for <a>adventofcode.com</a>.
module Y2015.D22

-- | Represents the final result of a sequence of player moves.
data Result

-- | Indicates a player win with the total mana spent.
Won :: Int -> Result

-- | Player loss.
Lost :: Result

-- | Finds the minimum required mana to win a game.
spellBattle :: Bool -> String -> Result

-- | Provided as a quicker method for testing shorter player battles.
testSpellBattle :: Bool -> String -> Result
instance GHC.Show.Show Y2015.D22.Boss
instance GHC.Classes.Eq Y2015.D22.Boss
instance GHC.Show.Show Y2015.D22.Player
instance GHC.Classes.Eq Y2015.D22.Player
instance GHC.Show.Show Y2015.D22.State
instance GHC.Show.Show Y2015.D22.Spell
instance GHC.Classes.Ord Y2015.D22.Spell
instance GHC.Classes.Eq Y2015.D22.Spell
instance GHC.Enum.Enum Y2015.D22.Spell
instance GHC.Show.Show Y2015.D22.Game
instance GHC.Show.Show Y2015.D22.Result
instance GHC.Classes.Ord Y2015.D22.Result
instance GHC.Classes.Eq Y2015.D22.Result


-- | Solutions to the day 23 set of problems for <a>adventofcode.com</a>.
module Y2015.D23

-- | Solver for part a set of instructions.
exInstructions :: String -> Registers

-- | Solver for part b set of instructions.
exInstructions2 :: String -> Registers
instance GHC.Show.Show Y2015.D23.Instruction


-- | Solutions to the day 24 set of problems for <a>adventofcode.com</a>.
module Y2015.D24

-- | Find the ideal entanglement value for a given input of packages.
idealEntanglement :: Int -> String -> Int

-- | Find the ideal entanglement value for a given input of packages.
idealEntanglementOptimized :: Int -> String -> Maybe Int


-- | Solutions to the day 25 set of problems for <a>adventofcode.com</a>.
--   
--   Implements a simple function to return the machine code at a position
--   indicated by plaintext input for a row and column.
module Y2015.D25

-- | Return the manual code found at the indicated row and column |from
--   human-readable input.
manualCodeFrom :: String -> Integer


-- | Shared functions that support solutions to problems for the
--   <a>adventofcode.com</a> challenges.
module Y2015.Util

-- | Combinator operator for predicates
(<&&>) :: (a -> Bool) -> (a -> Bool) -> a -> Bool

-- | Generic parsing wrapper
regularParse :: Parser a -> String -> Either ParseError a

-- | Generic <a>Int</a> parser
intParser :: Parser Int


-- | Solutions to the day 11 set of problems for <a>adventofcode.com</a>.
module Y2015.D11

-- | Rotate a password within specific rules
rotate :: String -> String


-- | Solutions to the day 09 set of problems for <a>adventofcode.com</a>.
module Y2015.D09

-- | Finds the longest route given a list of routes
longestRoute :: [Route] -> Maybe Distance

-- | Parsec parser for the <a>Route</a> type
routeParser :: Parser [Route]

-- | Finds the shortest route given a list of routes
shortestRoute :: [Route] -> Maybe Distance
instance GHC.Classes.Eq Y2015.D09.Route
instance GHC.Show.Show Y2015.D09.Route


-- | Solutions to the day 07 set of problems for <a>adventofcode.com</a>.
module Y2015.D07

-- | Constructs then returns resulting voltage from wiring spec
wire :: String -> [Instruction] -> Word16

-- | Parsec parser for list of <a>Instruction</a>s
circuitParser :: Parser [Instruction]

-- | Helper function to parse <a>Instruction</a>s
parseCircuits :: String -> Either ParseError [Instruction]

-- | Inject a manual instruction.
override :: Word16 -> Instruction
instance GHC.Show.Show Y2015.D07.Atom
instance GHC.Show.Show Y2015.D07.Gate
instance GHC.Show.Show Y2015.D07.Instruction


-- | Solutions to the day 06 set of problems for <a>adventofcode.com</a>.
module Y2015.D06

-- | Execute <a>Instruction</a> and return number of lit lights per part A
--   spec.
testA :: Instruction -> Int

-- | Execute <a>Instruction</a> and return number of lit lights per part B
--   spec.
testB :: Instruction -> Int

-- | Type of light grid instruction.
data Instruction
On :: Range -> Instruction
Off :: Range -> Instruction
Toggle :: Range -> Instruction

-- | Represents a two-dimensional range of lights.
data Range
Range :: Point -> Point -> Range

-- | Parses a string into a list of <a>Instruction</a>s.
parseInstructions :: String -> Either ParseError [Instruction]

-- | Folding function to aggregate computation for <a>Instruction</a>s per
--   part |A spec.
configureGridA :: Array U DIM2 Int -> Instruction -> Array U DIM2 Int

-- | Folding function to aggregate computation for <a>Instruction</a>s per
--   part |B spec.
configureGridB :: Array U DIM2 Int -> Instruction -> Array U DIM2 Int

-- | Run a light simulation
lightSimulation :: (Monad m, Foldable t) => (Array U DIM2 Int -> a -> Array U DIM2 Int) -> t a -> m Int
instance GHC.Show.Show Y2015.D06.Range
instance GHC.Classes.Eq Y2015.D06.Range
instance GHC.Show.Show Y2015.D06.Instruction


-- | Solutions to the day 05 set of problems for <a>adventofcode.com</a>.
module Y2015.D05

-- | Predicate to determine whether a string eschews forbidden strings.
clean :: String -> Bool

-- | Predicate to determine whether a given string is "nice".
isNice :: String -> Bool

-- | Whether a given string is "nice" per the spec.
isNicer :: String -> Bool

-- | Predicate to determine whether the given string contains at least
--   three |vowels.
thriceVoweled :: String -> Bool

-- | Predicate to determine whether a given string contains two letters |in
--   a row.
twiceRow :: String -> Bool


-- | Solutions to the day 02 set of problems for <a>adventofcode.com</a>.
module Y2015.D02

-- | Represents a present in three dimensions
data Present
Present :: Int -> Int -> Int -> Present

-- | Parse presents from an input string
parsePresents :: String -> Maybe [Present]

-- | Find total surface area from list of <a>Present</a>s
surfaceArea :: [Present] -> Int

-- | Find required length of ribbon for a list of presents.
ribbonLength :: [Present] -> Int
instance GHC.Show.Show Y2015.D02.Present
instance GHC.Classes.Eq Y2015.D02.Present


-- | Solutions to the set of problems for <a>adventofcode.com</a>.
--   
--   Each day is broken up into an individual module with accompaying spec
--   tests and (possibly?) benchmarks. Each day's module exports are
--   re-exported here for convenience when importing <tt>Y2015</tt> et. al.
module Y2015


-- | Solutions to the day 01 set of problems for <a>adventofcode.com</a>.
module Y2016.D01

-- | Find number of blocks traveled per list of instructions
blockDistance :: String -> Int

-- | Find first block that is visited twice
visitedTwice :: String -> Maybe Int
instance GHC.Enum.Enum Y2016.D01.Direction


-- | Solutions to the day 02 set of problems for <a>adventofcode.com</a>.
module Y2016.D02
bathroomCode :: Matrix String -> Position -> String -> String

-- | <tt>Matrix</tt> for part 1
grid1 :: Matrix String

-- | <tt>Matrix</tt> for part 2
grid2 :: Matrix String


-- | Solutions to the set of problems for <a>adventofcode.com</a>.
--   
--   Each day is broken up into an individual module with accompaying spec
--   tests and (possibly?) benchmarks. Each day's module exports are
--   re-exported here for convenience when importing <tt>Y2016</tt> et. al.
module Y2016


-- | Solutions to the day 01 set of problems for <a>adventofcode.com</a>.
module Y2018.D01
frequency :: String -> Maybe Int
twiceFrequency :: String -> Maybe Int
instance GHC.Classes.Eq Y2018.D01.Change


-- | Solutions to the day 02 set of problems for <a>adventofcode.com</a>.
module Y2018.D02
boxID :: String -> Maybe String
checksum :: String -> Int


-- | Solutions to the day 01 set of problems for <a>adventofcode.com</a>.
module Y2018.D03
intactInches :: String -> Either ParseError [Int]
overlappedInches :: String -> Either ParseError Int
instance GHC.Show.Show Y2018.D03.Claim
instance GHC.Classes.Eq Y2018.D03.Claim


-- | Solutions to the day 04 set of problems for <a>adventofcode.com</a>.
module Y2018.D04
laziestGuard :: String -> Either ParseError Int
laziestMinute :: String -> Either ParseError Int
instance GHC.Show.Show Y2018.D04.TimeStamp
instance GHC.Classes.Ord Y2018.D04.TimeStamp
instance GHC.Classes.Eq Y2018.D04.TimeStamp
instance GHC.Show.Show Y2018.D04.Entry
instance GHC.Classes.Ord Y2018.D04.Entry
instance GHC.Classes.Eq Y2018.D04.Entry
instance GHC.Show.Show Y2018.D04.Log
instance GHC.Classes.Ord Y2018.D04.Log
instance GHC.Classes.Eq Y2018.D04.Log
instance GHC.Show.Show Y2018.D04.Shift
instance GHC.Classes.Ord Y2018.D04.Shift
instance GHC.Classes.Eq Y2018.D04.Shift


-- | Solutions to the day 05 set of problems for <a>adventofcode.com</a>.
module Y2018.D05
react :: String -> Int
reactBest :: String -> Int


-- | Solutions to the set of problems for <a>adventofcode.com</a>.
--   
--   Each day is broken up into an individual module with accompaying spec
--   tests and (possibly?) benchmarks. Each day's module exports are
--   re-exported here for convenience when importing <tt>Y2018</tt> et. al.
module Y2018
